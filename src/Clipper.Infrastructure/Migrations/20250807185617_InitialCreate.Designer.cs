// <auto-generated />
using System;
using Clipper.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clipper.Infrastructure.Migrations
{
    [DbContext(typeof(ClipperDbContext))]
    [Migration("20250807185617_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Clipper.Domain.Entities.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("ExternalId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastSyncAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastSyncAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int>("Platform")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Platform");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("Url");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Channels_IsActive");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Channels_IsDeleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Channels_UserId");

                    b.HasIndex("ExternalId", "Platform")
                        .IsUnique()
                        .HasDatabaseName("IX_Channels_ExternalId_Platform");

                    b.ToTable("Channel", (string)null);
                });

            modelBuilder.Entity("Clipper.Domain.Entities.Clip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DurationSeconds");

                    b.Property<int>("EndTimeSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EndTimeSeconds");

                    b.Property<long>("FileSizeBytes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0L)
                        .HasColumnName("FileSizeBytes");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("LocalFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("LocalFilePath");

                    b.Property<string>("LocalThumbnailPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("LocalThumbnailPath");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("Reason");

                    b.Property<int>("RelevanceScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("RelevanceScore");

                    b.Property<int>("StartTimeSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StartTimeSeconds");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasColumnName("Status");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("Tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Title");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("VideoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Clips_IsDeleted");

                    b.HasIndex("RelevanceScore")
                        .HasDatabaseName("IX_Clips_RelevanceScore");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Clips_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Clips_Type");

                    b.HasIndex("VideoId")
                        .HasDatabaseName("IX_Clips_VideoId");

                    b.ToTable("Clip", (string)null);
                });

            modelBuilder.Entity("Clipper.Domain.Entities.ProcessingJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("AttemptCount");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CompletedAt");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletedAt");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DurationSeconds");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("ErrorMessage");

                    b.Property<string>("ErrorStackTrace")
                        .HasColumnType("TEXT")
                        .HasColumnName("ErrorStackTrace");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<int>("MaxAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3)
                        .HasColumnName("MaxAttempts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Parameters");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(5)
                        .HasColumnName("Priority");

                    b.Property<int>("ProgressPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("ProgressPercentage");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Result");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("StartedAt");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasColumnName("Status");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.Property<int?>("VideoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_ProcessingJobs_IsDeleted");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_ProcessingJobs_Priority");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProcessingJobs_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_ProcessingJobs_Type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ProcessingJobs_UserId");

                    b.HasIndex("VideoId")
                        .HasDatabaseName("IX_ProcessingJobs_VideoId");

                    b.HasIndex("Status", "Priority")
                        .HasDatabaseName("IX_ProcessingJobs_Status_Priority");

                    b.ToTable("ProcessingJob", (string)null);
                });

            modelBuilder.Entity("Clipper.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastLoginAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("PasswordHash");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Users_IsDeleted");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Clipper.Domain.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ChannelId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ChannelId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DurationSeconds");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("ExternalId");

                    b.Property<long>("FileSizeBytes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0L)
                        .HasColumnName("FileSizeBytes");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("LocalFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("LocalFilePath");

                    b.Property<string>("LocalThumbnailPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("LocalThumbnailPath");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("OriginalUrl");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasColumnName("ProcessingStatus");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("PublishedAt");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("ThumbnailUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT")
                        .HasColumnName("Title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("IX_Videos_ChannelId");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("IX_Videos_ExternalId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Videos_IsDeleted");

                    b.HasIndex("ProcessingStatus")
                        .HasDatabaseName("IX_Videos_ProcessingStatus");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("IX_Videos_PublishedAt");

                    b.ToTable("Video", (string)null);
                });

            modelBuilder.Entity("Clipper.Domain.Entities.Channel", b =>
                {
                    b.HasOne("Clipper.Domain.Entities.User", "User")
                        .WithMany("Channels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clipper.Domain.Entities.Clip", b =>
                {
                    b.HasOne("Clipper.Domain.Entities.Video", "Video")
                        .WithMany("Clips")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Clipper.Domain.Entities.ProcessingJob", b =>
                {
                    b.HasOne("Clipper.Domain.Entities.User", "User")
                        .WithMany("ProcessingJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Clipper.Domain.Entities.Video", "Video")
                        .WithMany("ProcessingJobs")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Clipper.Domain.Entities.Video", b =>
                {
                    b.HasOne("Clipper.Domain.Entities.Channel", "Channel")
                        .WithMany("Videos")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Clipper.Domain.Entities.Channel", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Clipper.Domain.Entities.User", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("ProcessingJobs");
                });

            modelBuilder.Entity("Clipper.Domain.Entities.Video", b =>
                {
                    b.Navigation("Clips");

                    b.Navigation("ProcessingJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
